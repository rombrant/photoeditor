{"version":3,"sources":["TopBar.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","pathname","location","Navbar","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","active","icona","require","iconb","iconc","icond","download","myTheme","locale_ru_RU","HomePage","useState","imageSrc","imageEditor","React","createRef","Button","onClick","data","current","imageEditorInst","toDataURL","mimeType","split","extension","includeUI","loadImage","path","name","locale","theme","menu","initMenu","uiSize","height","width","menuBarPosition","cssMaxHeight","cssMaxWidth","selectionStyle","cornerSize","rotatingPointOffset","usageStatistics","ref","history","createHistory","App","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06a68586.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport \"./TopBar.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nfunction TopBar({ location }) {\r\n  const { pathname } = location;\r\n  return (\r\n    <Navbar expand=\"lg\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">Photo Editor App</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/\" active={pathname === \"/\"}>\r\n            Home\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\nexport default withRouter(TopBar);","import React, { useState, useEffect } from \"react\";\r\nimport \"./HomePage.css\";\r\nimport \"./ImageEditor.css\";\r\nimport ImageEditor from \"@toast-ui/react-image-editor\";\r\nimport Button from \"react-bootstrap/Button\";\r\nconst icona = require(\"tui-image-editor/dist/svg/icon-a.svg\");\r\nconst iconb = require(\"tui-image-editor/dist/svg/icon-b.svg\");\r\nconst iconc = require(\"tui-image-editor/dist/svg/icon-c.svg\");\r\nconst icond = require(\"tui-image-editor/dist/svg/icon-d.svg\");\r\nconst download = require(\"downloadjs\");\r\nconst myTheme = {\r\n  \"menu.backgroundColor\": \"black\",\r\n  \"common.backgroundColor\": \"white\", \r\n  \"downloadButton.backgroundColor\": \"white\",\r\n  \"downloadButton.borderColor\": \"white\",\r\n  \"downloadButton.color\": \"white\",\r\n  \"menu.normalIcon.path\": icond,\r\n  \"menu.activeIcon.path\": iconb,\r\n  \"menu.disabledIcon.path\": icona,\r\n  \"menu.hoverIcon.path\": iconc,\r\n};\r\nvar locale_ru_RU = { // override default English locale to your custom\r\n    'Crop': 'Обзрезать',\r\n    'Delete-all': 'Удалить всё',\r\n    'Flip': 'Отразить',\r\n    'Rotate': 'Повернуть',\r\n    'Draw': 'Рисовать',\r\n    'Shape': 'Фигуры',\r\n    'Text': 'Текст',\r\n    'Filter': 'Фильтр',\r\n    'Mask': 'Маска',\r\n    'Icon': 'Иконка',\r\n    'Load': 'Загрузить',\r\n    'Color': 'Цвет',\r\n    'Free': 'Кривая',\r\n    'Straight': 'Прямая',\r\n    'Range': 'Диапазон',\r\n    'Rectangle': 'Квадрат',\r\n    'Circle': 'Круг',\r\n    'Triangle': 'Треугольник',\r\n    'Stroke': 'Штриховать',\r\n    'Fill': 'Заливка',\r\n    'Text size': 'Размер шрифта',\r\n    'Left': 'Левый',\r\n    'Center': 'Центр',\r\n    'Right': 'Правый',\r\n    'Grayscale': 'Серость',\r\n    'Invert': 'Инвертировать',\r\n    'Sepia': 'Сепиа',\r\n    'Sepia2': 'Сепиа2',\r\n    'Blur': 'Размытие',\r\n    'Sharpen': 'Заострение',\r\n    'Emboss': 'Теснить',\r\n    'Remove White': 'Уровень белого',\r\n    'Distance': 'Дистанция',\r\n    'Brightness': 'Яркость',\r\n    'Noise': 'Шум',\r\n    'Pixelate': 'Пиксель',\r\n    'Color Filter': 'Цветофильтр',\r\n    'Threshold': 'Предел',\r\n    'Tint': 'Оттенок',\r\n    'Multiply': 'Умножение',\r\n    'Blend': 'Смешать',\r\n    'Load Mask Image': 'Загрузить Маску Изображения',\r\n    'Apply': 'Применить',\r\n    'Custom icon': 'Своя иконка',\r\n    'Heart': 'Сердце',\r\n    'Arrow': 'Стрелка',\r\n    'Arrow-2': 'Стрелка-2',\r\n    'Arrow-3': 'Стрелка-3',\r\n    'Star': 'Звезда',\r\n    'Star-2': 'Звезда-2',\r\n    'Polygon': 'Полигон',\r\n    'Location': 'Локация',\r\n    'Bubble': 'Диалог',\r\n    'Bold': 'Жирный',\r\n    'Italic': 'Наклонный',\r\n    'Underline': 'Подчеркнутый',\r\n    'Cancel': 'Отменить',\r\n    'Reset': 'Сброс',\r\n    'Flip X': 'Отразить X',\r\n    'Flip Y': 'Отразить Y',\r\n    'Custom': 'Собственный',\r\n    'Square': 'Квадрат',\r\n    // etc...\r\n};\r\nfunction HomePage() {\r\n  const [imageSrc, setImageSrc] = useState(\"\");\r\n  const imageEditor = React.createRef();\r\n  const saveImageToDisk = () => {\r\n    const imageEditorInst = imageEditor.current.imageEditorInst;\r\n    const data = imageEditorInst.toDataURL();\r\n    if (data) {\r\n      const mimeType = data.split(\";\")[0];\r\n      const extension = data.split(\";\")[0].split(\"/\")[1];\r\n      download(data, `image.${extension}`, mimeType);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className=\"center\">\r\n        <h1>Фото редактор</h1>\r\n        <Button className='button' onClick={saveImageToDisk}>Сохранить на диск.</Button>\r\n      </div>\r\n      <ImageEditor\r\n        includeUI={{\r\n          loadImage: {\r\n            path: imageSrc,\r\n            name: \"image\",\r\n          },\r\n          locale: locale_ru_RU,\r\n          theme: myTheme,\r\n          menu: [\"crop\", \"flip\", \"rotate\", \"draw\", \"shape\", \"text\", \"filter\", \"mask\", \"icon\"],\r\n          initMenu: \"\",\r\n          uiSize: {\r\n            height: `650px`,\r\n            width: '600px'\r\n          },\r\n          menuBarPosition: \"right\",\r\n        }}\r\n        cssMaxHeight={650}\r\n        cssMaxWidth={500}\r\n        selectionStyle={{\r\n          cornerSize: 20,\r\n          rotatingPointOffset: 70,\r\n        }}\r\n        usageStatistics={true}\r\n        ref={imageEditor}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default HomePage;","import React from \"react\";\nimport \"./App.css\";\nimport TopBar from \"./TopBar\";\nimport { Router, Route, Link } from \"react-router-dom\";\nimport { createBrowserHistory as createHistory } from \"history\";\nimport HomePage from \"./HomePage\";\nconst history = createHistory();\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        {/* <TopBar /> */}\n        <Route\n          path=\"/\"\n          exact\n          component={HomePage}\n        />\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}